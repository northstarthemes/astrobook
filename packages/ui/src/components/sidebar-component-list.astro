---
import '@northstarthemes/astrobook-types'

import { getPathWithBase } from '@northstarthemes/astrobook-core/client'
import groupBy from 'just-group-by'
import config from 'virtual:astrobook/global-config.mjs'
import modules from 'virtual:astrobook/story-modules.mjs'

interface Props {
  story?: string
}

// Group modules by directory
const groupedModules = groupBy(modules, (module) => module.directory)
---

<div
  class=":uno: flex flex-col gap-4 overflow-y-auto border-0 px-2 pt-4 pb-8"
  id="astrobook-sidebar-component-list"
>
  {
    Object.entries(groupedModules).map(([directory, directoryModules]) => (
      <div class=":uno: flex flex-col gap-0.5">
        <div class=":uno: px-2 text-sm text-gray-500 opacity-50 dark:text-gray-400">
          {directory}
        </div>
        {directoryModules.map((module) => (
          <Fragment>
            <button
              class:list={[
                ':uno: flex items-center gap-2 rounded text-sm no-underline transition',
                ':uno: px-2 py-1 text-gray-900 hover:bg-gray-200 dark:text-gray-300 dark:hover:bg-gray-700',
                'astrobook-focus-ring',
                'astrobook-module-toggle',
              ]}
              data-module-id={module.name}
              data-expanded="false"
              data-config-expanded={config.collapsed ? 'false' : 'true'}
            >
              <span class=":uno: i-lucide-chevron-down astrobook-chevron collapsed inline-block size-4 text-gray-400 transition-transform dark:text-gray-500" />
              <span class=":uno: i-lucide-box inline-block size-4 text-gray-400 dark:text-gray-500" />
              <span>{module.name}</span>
            </button>
            <div
              class="astrobook-stories-container collapsed"
              data-module-stories={module.name}
            >
              {module.stories.map((story) => (
                <a
                  class:list={[
                    ':uno: flex items-center gap-2 rounded text-sm no-underline transition',
                    ':uno: py-1 pr-2 pl-5',
                    'astrobook-focus-ring',
                    'outline-offset-[-1px]',
                    ':uno: text-gray-600 hover:bg-gray-200 hover:text-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-100',
                  ]}
                  href={getPathWithBase(
                    `/dashboard/${story.id}`,
                    config.baseUrl,
                  )}
                  data-active={Astro.props.story === story.id ? '' : undefined}
                  data-story-id={story.id}
                  tabindex="-1"
                >
                  <span class=":uno: i-lucide-diamond inline-block size-4 text-gray-400 dark:text-gray-500" />
                  <span>{story.name}</span>
                </a>
              ))}
            </div>
          </Fragment>
        ))}
      </div>
    ))
  }
</div>

<style>
  .astrobook-stories-container {
    overflow: hidden;
    transition:
      max-height 0.3s ease-out,
      opacity 0.3s ease-out;
    opacity: 1;
  }

  .astrobook-stories-container.collapsed {
    max-height: 0;
    opacity: 0;
  }

  .astrobook-chevron {
    transform: rotate(0deg);
  }

  .astrobook-chevron.collapsed {
    transform: rotate(-90deg);
  }
</style>

<script is:inline>
  // @ts-check
  ;(() => {
    const elementId = 'astrobook-sidebar-component-list'
    const sessionKey = 'astrobook-navigation-scroll-position'

    /**
     * Saves the current scroll position of the navigation element to sessionStorage
     */
    const save = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      sessionStorage.setItem(sessionKey, String(el.scrollTop))
    }

    /**
     * Creates a throttled version of a function
     * @param {() => void} func - The function to throttle
     * @param {number} limit - The time limit in milliseconds
     * @returns {() => void} - The throttled function
     */
    const throttle = (func, limit) => {
      /** @type {number | null} */
      let pending = null

      return () => {
        if (pending) return

        pending = 1
        setTimeout(() => {
          pending = null
          func()
        }, limit)
      }
    }

    const throttledSave = throttle(save, 100)

    /**
     * Updates the active state of sidebar links based on current URL
     * and ensures containers with active stories are expanded
     */
    const updateActiveStates = () => {
      const storyLinks = document.querySelectorAll('a[data-story-id]')
      const currentPath = window.location.pathname

      // Reset all modules to not have active stories
      const allToggles = document.querySelectorAll('.astrobook-module-toggle')
      allToggles.forEach((toggle) => {
        toggle.removeAttribute('data-has-active-story')
      })

      storyLinks.forEach((link) => {
        const href = link.getAttribute('href')
        const isActive = currentPath === href

        if (isActive) {
          link.setAttribute('data-active', '')
          // Add active classes directly
          link.classList.add('bg-gray-800', 'text-white', '!text-white')
          link.classList.remove('text-gray-600', 'dark:text-gray-400')

          // Find the parent module and ensure it's expanded
          const storiesContainer = link.closest('.astrobook-stories-container')
          if (storiesContainer) {
            const moduleId = storiesContainer.getAttribute(
              'data-module-stories',
            )
            const moduleToggle = document.querySelector(
              `[data-module-id="${moduleId}"]`,
            )
            const chevron = moduleToggle?.querySelector('.astrobook-chevron')

            if (moduleToggle && chevron) {
              // Mark as having active story and ensure expanded
              moduleToggle.setAttribute('data-has-active-story', 'true')
              moduleToggle.setAttribute('data-expanded', 'true')
              storiesContainer.classList.remove('collapsed')
              chevron.classList.remove('collapsed')

              // Ensure all links in this container are focusable
              const containerLinks =
                storiesContainer.querySelectorAll('a[data-story-id]')
              containerLinks.forEach((containerLink) => {
                containerLink.removeAttribute('tabindex')
              })
            }
          }
        } else {
          link.removeAttribute('data-active')
          // Remove active classes and restore inactive
          link.classList.remove('bg-gray-800', 'text-white', '!text-white')
          link.classList.add('text-gray-600', 'dark:text-gray-400')
        }
      })
    }

    /**
     * Updates tab navigation for collapsed/expanded containers
     */
    const updateTabNavigation = () => {
      const storiesContainers = document.querySelectorAll(
        '.astrobook-stories-container',
      )

      storiesContainers.forEach((container) => {
        const isCollapsed = container.classList.contains('collapsed')
        const links = container.querySelectorAll('a[data-story-id]')

        links.forEach((link) => {
          if (isCollapsed) {
            link.setAttribute('tabindex', '-1')
          } else {
            link.removeAttribute('tabindex')
          }
        })
      })
    }

    /**
     * Applies initial expansion state based on config
     */
    const applyInitialExpansionState = () => {
      const toggles = document.querySelectorAll('.astrobook-module-toggle')

      toggles.forEach((toggle) => {
        const moduleId = toggle.getAttribute('data-module-id')
        const configExpanded =
          toggle.getAttribute('data-config-expanded') === 'true'
        const hasActiveStory =
          toggle.getAttribute('data-has-active-story') === 'true'

        if (!moduleId) return

        const storiesContainer = document.querySelector(
          `[data-module-stories="${moduleId}"]`,
        )
        const chevron = toggle.querySelector('.astrobook-chevron')

        if (!storiesContainer || !chevron) return

        // Expand if config says to expand OR if it has an active story
        const shouldExpand = configExpanded || hasActiveStory

        if (shouldExpand) {
          toggle.setAttribute('data-expanded', 'true')
          storiesContainer.classList.remove('collapsed')
          chevron.classList.remove('collapsed')

          // Make links focusable
          const links = storiesContainer.querySelectorAll('a[data-story-id]')
          links.forEach((link) => {
            link.removeAttribute('tabindex')
          })
        }
      })
    }

    /**
     * Sets up toggle functionality for module sections
     */
    const setupToggleFunctionality = () => {
      const toggles = document.querySelectorAll('.astrobook-module-toggle')

      toggles.forEach((toggle) => {
        const moduleId = toggle.getAttribute('data-module-id')
        if (!moduleId) return

        // Skip if already initialized
        if (toggle.hasAttribute('data-initialized')) return
        toggle.setAttribute('data-initialized', 'true')

        const storiesContainer = document.querySelector(
          `[data-module-stories="${moduleId}"]`,
        )
        const chevron = toggle.querySelector('.astrobook-chevron')

        if (!storiesContainer || !chevron) return

        // Add click handler
        toggle.addEventListener('click', () => {
          // Don't allow collapsing if this module has an active story
          const hasActiveStory =
            toggle.getAttribute('data-has-active-story') === 'true'
          if (hasActiveStory) {
            return // Prevent collapsing modules with active stories
          }

          const isExpanded = toggle.getAttribute('data-expanded') === 'true'
          const newExpanded = !isExpanded

          console.log(
            `Toggle clicked for ${moduleId}: ${isExpanded} -> ${newExpanded}`,
          )

          toggle.setAttribute('data-expanded', String(newExpanded))

          if (newExpanded) {
            storiesContainer.classList.remove('collapsed')
            chevron.classList.remove('collapsed')
          } else {
            storiesContainer.classList.add('collapsed')
            chevron.classList.add('collapsed')
          }

          // Update tab navigation after toggle
          updateTabNavigation()
        })
      })
    }

    const load = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      const scrollPosition = sessionStorage.getItem(sessionKey) || ''
      if (scrollPosition.match(/^\d+(\.\d*)?$/)) {
        el.scrollTop = parseFloat(scrollPosition)
      }

      el.addEventListener('scroll', throttledSave)

      // Update active states on load
      updateActiveStates()

      // Apply initial expansion state after active states are determined
      applyInitialExpansionState()

      // Setup toggle functionality
      setupToggleFunctionality()
    }

    load()

    document.addEventListener('astro:page-load', () => {
      load()
    })

    // Update active states when navigating with view transitions
    document.addEventListener('astro:after-swap', () => {
      updateActiveStates()
      applyInitialExpansionState()
      setupToggleFunctionality()
    })
  })()
</script>
