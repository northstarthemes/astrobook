---
import '@northstarthemes/astrobook-types'

import { getPathWithBase } from '@northstarthemes/astrobook-core/client'
import groupBy from 'just-group-by'
import config from 'virtual:astrobook/global-config.mjs'
import modules from 'virtual:astrobook/story-modules.mjs'

interface Props {
  story?: string
}

// Group modules by directory
const groupedModules = groupBy(modules, (module) => module.directory)
---

<div
  class=":uno: flex flex-col gap-4 overflow-y-auto border-0 px-2 pb-8 pt-4"
  id="astrobook-sidebar-component-list"
>
  {
    Object.entries(groupedModules).map(([directory, directoryModules]) => (
      <div class=":uno: flex flex-col gap-0.5">
        <div class=":uno: px-2 text-sm text-gray-500 opacity-50 dark:text-gray-400">
          {directory}
        </div>
        {directoryModules.map((module) => (
          <Fragment>
            <div
              class:list={[
                ':uno: flex items-center gap-2 rounded text-sm no-underline transition',
                ':uno: px-2 py-1 text-gray-900 hover:bg-gray-200 dark:text-gray-300 dark:hover:bg-gray-700',
                'astrobook-focus-ring',
              ]}
            >
              <span class=":uno: i-lucide-box inline-block size-4 text-gray-400 dark:text-gray-500" />
              <span>{module.name}</span>
            </div>
            {module.stories.map((story) => (
              <a
                class:list={[
                  ':uno: flex items-center gap-2 rounded text-sm no-underline transition',
                  ':uno: py-1 pl-5 pr-2',
                  'astrobook-focus-ring',
                  ':uno: text-gray-600 hover:bg-gray-200 hover:text-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-100',
                ]}
                href={getPathWithBase(`/dashboard/${story.id}`, config.baseUrl)}
                data-active={Astro.props.story === story.id ? '' : undefined}
                data-story-id={story.id}
              >
                <span class=":uno: i-lucide-diamond inline-block size-4 text-gray-400 dark:text-gray-500" />
                <span>{story.name}</span>
              </a>
            ))}
          </Fragment>
        ))}
      </div>
    ))
  }
</div>

<script is:inline>
  // @ts-check
  ;(() => {
    const elementId = 'astrobook-sidebar-component-list'
    const sessionKey = 'astrobook-navigation-scroll-position'

    /**
     * Saves the current scroll position of the navigation element to sessionStorage
     */
    const save = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      sessionStorage.setItem(sessionKey, String(el.scrollTop))
    }

    /**
     * Creates a throttled version of a function
     * @param {() => void} func - The function to throttle
     * @param {number} limit - The time limit in milliseconds
     * @returns {() => void} - The throttled function
     */
    const throttle = (func, limit) => {
      /** @type {number | null} */
      let pending = null

      return () => {
        if (pending) return

        pending = 1
        setTimeout(() => {
          pending = null
          func()
        }, limit)
      }
    }

    const throttledSave = throttle(save, 100)

    /**
     * Updates the active state of sidebar links based on current URL
     */
    const updateActiveStates = () => {
      const storyLinks = document.querySelectorAll('a[data-story-id]')
      const currentPath = window.location.pathname
      
      storyLinks.forEach((link) => {
        const href = link.getAttribute('href')
        const isActive = currentPath === href
        
        if (isActive) {
          link.setAttribute('data-active', '')
          // Add active classes directly
          link.classList.add('bg-gray-800', 'text-white', '!text-white')
          link.classList.remove('text-gray-600', 'dark:text-gray-400')
        } else {
          link.removeAttribute('data-active')
          // Remove active classes and restore inactive
          link.classList.remove('bg-gray-800', 'text-white', '!text-white')
          link.classList.add('text-gray-600', 'dark:text-gray-400')
        }
      })
    }

    const load = () => {
      const el = document.getElementById(elementId)
      if (!el) return

      const scrollPosition = sessionStorage.getItem(sessionKey) || ''
      if (scrollPosition.match(/^\d+(\.\d*)?$/)) {
        el.scrollTop = parseFloat(scrollPosition)
      }

      el.addEventListener('scroll', throttledSave)
      
      // Update active states on load
      updateActiveStates()
    }

    load()

    document.addEventListener('astro:page-load', () => {
      load()
    })

    // Update active states when navigating with view transitions
    document.addEventListener('astro:after-swap', () => {
      updateActiveStates()
    })
  })()
</script>
